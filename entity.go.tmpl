/********************************
 * {{ .GoName }} {{- $allFields := .Fields }} {{ if .AutoIncrementField }}autoincrement: {{ .AutoIncrementField }}{{ end }}
{{- range $i, $f := .Fields }}
 * 	{{ $f.GoName}} {{ $f.GoType }} {{ $f.SQLName }} {{ if $f.InPrimaryKey }} <primary> {{ end }}
{{- end }}
{{ if .PrimaryIndex }} * Primary index: {{ .PrimaryIndex }}{{ end }}
{{- if len .UniqIndexes }}
 * Unique indexes: {{ range $n, $idx := .UniqIndexes }}
 *  {{ $n }}: {{ range $i, $f := $idx }}{{ $f.SQLName }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }}
 {{- end }}
{{- end }}
{{- if len .NonUniqIndexes }}
 * Non unique indexes: {{ range $n, $idx := .NonUniqIndexes }}
 *  {{ $n }}: {{ range $i, $f := $idx }}{{ $f.SQLName }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }}
 {{- end }}
{{- end }}
 ********************************/

func (e *{{ .GoName }}) Insert(ctx context.Context) (err error) {
	var pgconn pgx.Conn = ctx.Value("pgconn").(pgx.Conn)

	sql := `INSERT INTO "{{ .SQLName }}" ({{ range $i, $f := .Fields }}{{ $f.SQLName }}{{ if is_last $i $allFields | not }}, {{ end }}{{ end }}) 
	VALUES ({{ range $i, $f := .Fields }}${{ add $i 1 }}{{ if is_last $i $allFields | not }}, {{ end }}{{ end }})`
	// TODO: {{ if .AutoIncrementField }}RETURNING {{ .AutoIncrementField.SQLName }}{{ end }}
	var rows pgx.Rows
	rows, err = pgconn.Query(
		ctx,
		sql,
		{{ range $f := .Fields }}e.{{ $f.GoName }}, {{ end }}
	)
	defer func(){
		rows.Close()
		if err == nil {
			err = rows.Err()
		}
		if err != nil {
			err = fmt.Errorf("Insert query '%s' failed: %+v", sql, err)
		}
	}()
	

	{{ if .AutoIncrementField }} // Fill auto id
		if ! rows.Next() {
			return fmt.Errorf("Insert-query doesn't return anything, but has returning clause")
		}

		vals, err := rows.Values()
		if err != nil {
			return err
		}

		e.{{ .AutoIncrementField.GoName }} = vals[{{ .AutoIncrementField.Num }}].({{ .AutoIncrementField.GoType }})
	{{ end }}

	return nil
}

// TODO: func (es []*{{ .GoName }}) Insert(ctx context.Context) (err error) {}

{{ if .PrimaryIndex }} {{ $primaryIndex := index .UniqIndexes .PrimaryIndex }}{{ $autoIncrementField := .AutoIncrementField }}
func (e *{{ .GoName }}) Update(ctx context.Context) (err error) {
	var pgconn pgx.Conn = ctx.Value("pgconn").(pgx.Conn)

	sql := `UPDATE "{{ .SQLName }}"
	SET {{ range $i, $f := .Fields }}{{ if $f.InPrimaryKey | not }}{{ $f.SQLName }} = ${{ add $i 1 }}{{ if is_last $i $allFields | not }}, {{ end }}{{ end }}{{ end }}
	WHERE {{ range $i, $f := $primaryIndex }}
		{{- $f.SQLName }} = ${{ add $i 1 }}
		{{- if is_last $i $primaryIndex | not }} AND {{ end }}
	{{- end }}`
	var rows pgx.Rows
	rows, err = pgconn.Query(ctx, sql, {{ range $i, $f := .Fields }}e.{{ $f.GoName }}{{ if is_last $i $allFields | not }}, {{ end }}{{ end }});
	defer func(){
		rows.Close()
		if err == nil {
			err = rows.Err()
		}
		if err != nil {
			err = fmt.Errorf("Update query '%s' failed: %+v", sql, err)
		}
	}()

	return nil
}

func (e *{{ .GoName }}) Delete(ctx context.Context) (err error) {
	var pgconn pgx.Conn = ctx.Value("pgconn").(pgx.Conn)

	sql := `DELETE FROM "{{ .SQLName }}"
	WHERE {{ range $i, $f := $primaryIndex }}
		{{- $f.SQLName }} = ${{ add $f.Num 1 }}
		{{- if is_last $i $primaryIndex | not }} AND {{ end }}
	{{- end }}`
	var rows pgx.Rows
	rows, err = pgconn.Query(
		ctx,
		sql,
		{{ range $f := $primaryIndex }}e.{{ $f.GoName }}, {{ end }}
	);
	defer func(){
		rows.Close()
		if err == nil {
			err = rows.Err()
		}
		if err != nil {
			err = fmt.Errorf("Delete query '%s' failed: %+v", sql, err)
		}
	}()

	return nil
}
{{ end }}

// TODO: func (es []*{{ .GoName }}) Delete(ctx context.Context) (err error) {}

func ({{ .GoName }}) Find(ctx context.Context, condition string, values []interface{}) (entities []{{ .GoName }}, err error) {
	var pgconn pgx.Conn = ctx.Value("pgconn").(pgx.Conn)

	sql := `SELECT {{ range $i, $f := .Fields }}{{ $f.SQLName }}{{ if is_last $i $allFields | not }}, {{ end }}{{ end }}
	FROM "{{ .SQLName }}"
	WHERE ` + condition
	var rows pgx.Rows
	rows, err = pgconn.Query(
		ctx,
		sql,
		values...
	)
	defer func(){
		rows.Close()
		if err == nil {
			err = rows.Err()
		}
		if err != nil {
			err = fmt.Errorf("Delete query '%s' failed: %+v", sql, err)
		}
	}()

	for rows.Next() {

		e := {{ .GoName }}{}

		rows.Scan(
			{{- range $i, $f := .Fields }}
			&e.{{ $f.GoName }},
			{{- end }}	
		)

		// values, err := rows.Values()
		// if err != nil {
		// 	return nil, err
		// }

		entities = append(entities, e)
	}

	return entities, nil
}

func (e {{ .GoName }}) GetAll(ctx context.Context) ([]{{ .GoName }}, error) {
	return e.Find(ctx, "1=1", []any{})
}

{{ if len .UniqIndexes }} {{ $entityGoName := .GoName }}
	{{- range $n, $idx := .UniqIndexes }}
func (e {{ $entityGoName }}) GetBy{{ snake_case_to_camel_case $n true }}(ctx context.Context, {{ range $i, $f := $idx }}{{ snake_case_to_camel_case $f.SQLName false }} {{ $f.GoType }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }}) (*{{ $entityGoName }}, error) {
	es, err := e.Find(
		ctx,
		"{{ range $i, $f := $idx }}{{ $f.SQLName }} = ${{ add 1 $i }}{{ if is_last $i $idx | not }} AND {{ end }}{{ end }}",
		[]any{ {{ range $i, $f := $idx }}{{ snake_case_to_camel_case $f.SQLName false }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }} },
	)
	if err != nil {
		return nil, err
	}
	if len(es) == 1 {
		return &es[0], nil
	}

	return nil, nil
}

func (e {{ $entityGoName }}) MultiGetBy{{ snake_case_to_camel_case $n true }}(ctx context.Context, {{ range $i, $f := $idx }}{{ snake_case_to_camel_case $f.SQLName false }} []{{ $f.GoType }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }}) ([]{{ $entityGoName }}, error) {
	{{ $firstParam := snake_case_to_camel_case (index $idx 0).SQLName false }}
	var params []any = make([]any, 0, len({{ $firstParam }}) * {{ len $idx }})

	where := make([]string, len({{ $firstParam }}))
	for i := range {{ $firstParam }} {
		where[i] = "({{ range $i, $f := $idx }}{{ $f.SQLName }} = ${{ $i }}{{ if is_last $i $idx | not }} AND {{ end }}{{ end }})"
		params = append(params, {{ range $i, $f := $idx }}{{ snake_case_to_camel_case $f.SQLName false }}[i]{{ if is_last $i $idx | not }}, {{ end }}{{ end }})
	}

	return e.Find(ctx, strings.Join(where, " OR "), params)
}
	{{- end }}
{{- end }}

{{if len .NonUniqIndexes }} {{ $entityGoName := .GoName }}
	{{- range $n, $idx := .NonUniqIndexes }}
func (e {{ $entityGoName }}) GetBy{{ snake_case_to_camel_case $n true }}(ctx context.Context, {{ range $i, $f := $idx }}{{ snake_case_to_camel_case $f.SQLName false }} {{ $f.GoType }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }}) ([]{{ $entityGoName }}, error) {
	return e.Find(
		ctx,
		"{{ range $i, $f := $idx }}{{ $f.SQLName }} = ${{ add 1 $i }}{{ if is_last $i $idx | not }} AND {{ end }}{{ end }}",
		[]any{ {{ range $i, $f := $idx }}{{ snake_case_to_camel_case $f.SQLName false }}{{ if is_last $i $idx | not }}, {{ end }}{{ end }} },
	)
}
	{{- end }}
{{- end }}
